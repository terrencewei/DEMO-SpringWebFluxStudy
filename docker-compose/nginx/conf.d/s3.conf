# GLOBAL VARIABLE DEFINITION -- start
# All custom variables will start with $global
map $host $global__debug {
    default false;
}
map $host $global__client_facing_server__expires {
    default 30d;
}
map $host $global__aws_facing_server__expires {
    default 60s;
}
map $host $global__aws_facing_server__backend {
    # using docker-compose app name as host name using in docker compose network
    default 'app-spring-web-flux-study:8081/s3/view';
}
# GLOBAL VARIABLE DEFINITION -- end
# NGINX will create a cache capable of storing 100MB of keys and 1000MB of data.
proxy_cache_path /tmp/nginx_cache levels=1:2 keys_zone=nginx_cache:100M max_size=1G inactive=40d;

# front facing virtual host for caching
server {
    listen 80;
    server_name client_facing_server;

    location /img/ {
        if ($global__debug = 'true') {
            add_header X-debug-client_facing_server__uri "$uri" always;
            add_header X-debug-client_facing_server__proxy_cache_key "client_cache_key_$proxy_host$uri$is_args$args" always;
        }
        proxy_pass http://127.0.0.1:10177;
        proxy_cache nginx_cache;
        proxy_cache_key "client_cache_key_$proxy_host$uri$is_args$args";
        add_header X-Nginx-Cache-Status "$upstream_cache_status" always;

        # proxy_cache_lock on; # Allow only one request
        # TBD: nginx proxy_cache_valid directive does not support variables yet
        proxy_cache_valid 30d;
        expires $global__client_facing_server__expires;
    }
}

# resizing server
server {
    listen 10177;
    server_name image_resize_server;

    location ~ ^/img/([0-9]+)x([0-9]+)/(.+) {
        if ($global__debug = 'true') {
            add_header X-debug-image_resize_server__uri "$uri" always;
        }

        error_page 415 =404 /empty.gif;
        image_filter_buffer 20M;
        image_filter_jpeg_quality 75; # Desired JPG quality
        image_filter_interlace on; # For progressive JPG

        image_filter resize $1 $2;

        rewrite ^ $request_uri;
        rewrite ^/img/([0-9]+)x([0-9]+)/(.*) $3 break;
        return 400;

        proxy_pass http://127.0.0.1:10178/img/$uri;
    }
}

# back-end virtual host for retrieving file from AWS
server {
    listen 10178;
    server_name aws_facing_server;

    #resolver 8.8.8.8;  # Use Google for DNS.
    resolver 127.0.0.11 ipv6=off; # Use Docker DNS resolver
    resolver_timeout 10s;

    proxy_buffering off;
    proxy_http_version 1.1;
    proxy_pass_request_body off;  # Not needed by AWS.
    proxy_pass_request_headers off;

    # Clean up the headers going to and from S3.
    proxy_hide_header "x-amz-id-2";
    proxy_hide_header "x-amz-request-id";
    proxy_hide_header "x-amz-storage-class";
    proxy_hide_header "Set-Cookie";
    proxy_ignore_headers "Set-Cookie";

    proxy_connect_timeout   60;
    proxy_send_timeout      60;
    proxy_read_timeout      60;

    location ~ ^/img/(.+) {
        if ($global__debug = 'true') {
            add_header X-debug-aws_facing_server__uri "$uri" always;
            add_header X-debug-aws_facing_server__proxy_pass "http://$global__aws_facing_server__backend/$uri" always;
            add_header X-debug-aws_facing_server__proxy_cache_key "s3_cache_key_$proxy_host$uri$is_args$args" always;
        }

        rewrite ^ $request_uri;
        rewrite ^/img/(.*) $1 break;
        return 400;

        proxy_pass http://$global__aws_facing_server__backend/$uri;

        error_page 415 =404 /empty.gif;
        proxy_cache nginx_cache;
        proxy_cache_key "s3_cache_key_$proxy_host$uri$is_args$args";
        # proxy_cache_lock on; # Allow only one request

        # TBD: nginx proxy_cache_valid directive does not support variables yet
        proxy_cache_valid 60s;
        expires $global__aws_facing_server__expires;
    }
}